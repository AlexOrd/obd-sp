<!-- 14. Практика Live Coding -->
<section style="font-size: 0.9em;" data-auto-animate>
	<h2>{{title}}</h2>

	<div style="display: grid; grid-template-columns: 280px 1fr; gap: 40px; align-items: start; margin-top: 30px;">
		<!-- Animated Terminal with Typed.js -->
		<div style="position: relative;">
			<style>
				@keyframes screen-glow {
					0%, 100% { box-shadow: 0 0 15px rgba(0, 240, 255, 0.4), inset 0 0 10px rgba(0, 240, 255, 0.1); }
					50% { box-shadow: 0 0 30px rgba(0, 240, 255, 0.7), inset 0 0 15px rgba(0, 240, 255, 0.2); }
				}
				@keyframes pixel-float {
					0%, 100% { transform: translateY(0px); }
					50% { transform: translateY(-5px); }
				}
				@keyframes key-press {
					0%, 100% { transform: scale(1); opacity: 0.7; }
					50% { transform: scale(0.95); opacity: 1; }
				}
				.live-coding-terminal {
					width: 280px;
					background: linear-gradient(135deg, #0a0a0f 0%, #1a1a2e 100%);
					border: 3px solid var(--cyber-cyan);
					border-radius: 12px;
					position: relative;
					animation: screen-glow 3s ease-in-out infinite, pixel-float 4s ease-in-out infinite;
					box-shadow: 0 10px 30px rgba(0, 240, 255, 0.3);
				}
				.terminal-header {
					background: linear-gradient(90deg, var(--cyber-cyan) 0%, var(--cyber-magenta) 100%);
					padding: 8px 12px;
					border-radius: 9px 9px 0 0;
					display: flex;
					align-items: center;
					gap: 6px;
				}
				.terminal-dot {
					width: 10px;
					height: 10px;
					border-radius: 50%;
					background: var(--cyber-yellow);
				}
				.terminal-dot:nth-child(2) { background: var(--cyber-magenta); }
				.terminal-dot:nth-child(3) { background: var(--cyber-red); }
				.terminal-screen {
					padding: 15px;
					min-height: 180px;
					background: #0a0a0f;
					font-family: 'Share Tech Mono', monospace;
					font-size: 11px;
					color: var(--cyber-cyan);
					line-height: 1.6;
				}
				.terminal-prompt { color: var(--cyber-yellow); }
				.terminal-output { color: var(--cyber-cyan); margin: 3px 0; }
				.terminal-success { color: #00ff41; }
				.typed-cursor {
					color: var(--cyber-cyan);
					animation: blink 1s infinite;
				}
				@keyframes blink {
					0%, 49% { opacity: 1; }
					50%, 100% { opacity: 0; }
				}
				.pixel-keys {
					display: flex;
					gap: 4px;
					padding: 10px;
					justify-content: center;
				}
				.pixel-key {
					width: 22px;
					height: 18px;
					background: linear-gradient(180deg, var(--cyber-yellow) 0%, #b8a408 100%);
					border-radius: 3px;
					border: 2px solid rgba(252, 238, 10, 0.3);
					animation: key-press 2s ease-in-out infinite;
				}
				.pixel-key:nth-child(2) { animation-delay: 0.2s; }
				.pixel-key:nth-child(3) { animation-delay: 0.4s; }
				.pixel-key:nth-child(4) { animation-delay: 0.6s; }
			</style>

			<div class="live-coding-terminal">
				<div class="terminal-header">
					<div class="terminal-dot"></div>
					<div class="terminal-dot"></div>
					<div class="terminal-dot"></div>
				</div>
				<div class="terminal-screen" id="typed-terminal-{{lectureNumber}}">
					<div class="terminal-prompt">$ <span class="typed-text"></span></div>
				</div>
				<div class="pixel-keys">
					<div class="pixel-key"></div>
					<div class="pixel-key"></div>
					<div class="pixel-key"></div>
					<div class="pixel-key"></div>
				</div>
			</div>

			<script src="https://cdn.jsdelivr.net/npm/typed.js@2.1.0/dist/typed.umd.js"></script>
			<script>
				// Initialize Typed.js for terminal animation
				document.addEventListener('DOMContentLoaded', function() {
					const terminalEl = document.querySelector('#typed-terminal-{{lectureNumber}} .typed-text');
					if (terminalEl && !terminalEl.dataset.typed) {
						terminalEl.dataset.typed = 'true';
						new Typed('#typed-terminal-{{lectureNumber}} .typed-text', {
							strings: [
								'git clone repo.git',
								'cd project^500\nls -la',
								'npm install^500\nnpm start^500\n<span class="terminal-success">✓ Server running!</span>',
								'code main.c^500\ngcc -Wall main.c^500\n./a.out^500\n<span class="terminal-success">Hello, World!</span>'
							],
							typeSpeed: 40,
							backSpeed: 20,
							backDelay: 2000,
							startDelay: 500,
							loop: true,
							contentType: 'html',
							cursorChar: '▋'
						});
					}
				});
			</script>
		</div>

		<!-- Action Items -->
		<div>
			<div style="background: rgba(252, 238, 10, 0.1); border-left: 4px solid var(--cyber-yellow); padding: 20px; margin-bottom: 25px;">
				<h3 style="color: var(--cyber-yellow); margin-top: 0; font-size: 1.1em;">
					<svg width="24" height="24" viewBox="0 0 24 24" style="vertical-align: middle; margin-right: 8px;">
						<rect x="4" y="4" width="6" height="6" fill="#fcee0a"/>
						<rect x="12" y="4" width="6" height="6" fill="#00f0ff"/>
						<rect x="4" y="12" width="6" height="6" fill="#ff00ff"/>
						<rect x="12" y="12" width="6" height="6" fill="#fcee0a"/>
					</svg>
					Що будемо робити:
				</h3>
				<p style="font-size: 1em; line-height: 1.6; margin: 0;">{{{description}}}</p>
			</div>

			<div style="margin-top: 20px;">
				<h3 style="color: var(--cyber-cyan); font-size: 1em; margin-bottom: 15px; display: flex; align-items: center; gap: 10px;">
					<svg width="20" height="20" viewBox="0 0 24 24">
						<rect x="3" y="5" width="18" height="3" fill="#00f0ff"/>
						<rect x="3" y="11" width="18" height="3" fill="#00f0ff"/>
						<rect x="3" y="17" width="18" height="3" fill="#00f0ff"/>
					</svg>
					Action Items:
				</h3>
				<div style="display: grid; gap: 12px;">
					{{#actionItems}}
					<div style="display: flex; gap: 12px; align-items: start; background: rgba(0, 240, 255, 0.05); padding: 12px; border-radius: 6px; border-left: 3px solid var(--cyber-cyan);">
						<svg width="24" height="24" viewBox="0 0 24 24" style="flex-shrink: 0; margin-top: 2px;">
							<rect x="4" y="4" width="16" height="16" fill="none" stroke="#00f0ff" stroke-width="2"/>
							<rect x="8" y="8" width="8" height="8" fill="#fcee0a"/>
						</svg>
						<span style="font-size: 0.95em; line-height: 1.5;">{{{.}}}</span>
					</div>
					{{/actionItems}}
				</div>
			</div>
		</div>
	</div>

	<p style="text-align: center; margin-top: 30px; font-size: 1.15em; color: var(--cyber-magenta);">
		<svg width="28" height="28" viewBox="0 0 24 24" style="vertical-align: middle; margin-right: 8px;">
			<polygon points="8,5 8,19 18,12" fill="#ff00ff"/>
			<rect x="6" y="3" width="14" height="2" fill="#ff00ff"/>
			<rect x="6" y="19" width="14" height="2" fill="#ff00ff"/>
		</svg>
		<strong>Готові? Почали кодити!</strong>
		<svg width="28" height="28" viewBox="0 0 24 24" style="vertical-align: middle; margin-left: 8px;">
			<rect x="4" y="8" width="4" height="8" fill="#fcee0a"/>
			<rect x="10" y="6" width="4" height="10" fill="#00f0ff"/>
			<rect x="16" y="4" width="4" height="12" fill="#ff00ff"/>
		</svg>
	</p>
</section>
